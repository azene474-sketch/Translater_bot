{"file_contents":{"main.py":{"content":"import os\nimport json\nimport asyncio\nimport shutil\nimport datetime\nfrom telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup\nfrom telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters\nfrom deep_translator import GoogleTranslator\n\n# ===== التوكن والبوت =====\nTELEGRAM_TOKEN = os.getenv(\"TELEGRAM_TOKEN\", \"PUT_YOUR_TOKEN_HERE\")\nADMIN_ID = int(os.getenv(\"ADMIN_ID\", \"PUT_YOUR_ADMIN_ID\"))\n\nDB_FILE = \"data.json\"\nBACKUP_DIR = \"backups\"\n\n# ===== إعداد ملف البيانات والنسخ الاحتياطية =====\nif not os.path.exists(BACKUP_DIR):\n    os.makedirs(BACKUP_DIR)\n\nif not os.path.exists(DB_FILE):\n    with open(DB_FILE, \"w\", encoding=\"utf-8\") as f:\n        json.dump({\"users\": [], \"channels\": []}, f, ensure_ascii=False, indent=4)\n\ndef load_data():\n    with open(DB_FILE, \"r\", encoding=\"utf-8\") as f:\n        return json.load(f)\n\ndef save_data(data):\n    # إنشاء نسخة احتياطية قبل الحفظ\n    create_backup()\n    with open(DB_FILE, \"w\", encoding=\"utf-8\") as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\ndef create_backup():\n    \"\"\"إنشاء نسخة احتياطية من ملف البيانات\"\"\"\n    if os.path.exists(DB_FILE):\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        backup_file = os.path.join(BACKUP_DIR, f\"data_backup_{timestamp}.json\")\n        shutil.copy2(DB_FILE, backup_file)\n        # الاحتفاظ بآخر 10 نسخ احتياطية فقط\n        cleanup_old_backups()\n\ndef cleanup_old_backups():\n    \"\"\"حذف النسخ الاحتياطية القديمة والاحتفاظ بآخر 10 نسخ\"\"\"\n    try:\n        backup_files = []\n        for file in os.listdir(BACKUP_DIR):\n            if file.startswith(\"data_backup_\") and file.endswith(\".json\"):\n                backup_files.append(os.path.join(BACKUP_DIR, file))\n        \n        backup_files.sort(key=os.path.getmtime, reverse=True)\n        \n        # حذف النسخ الزائدة عن 10\n        for backup_file in backup_files[10:]:\n            os.remove(backup_file)\n    except:\n        pass\n\ndef get_backup_files():\n    \"\"\"الحصول على قائمة بملفات النسخ الاحتياطية\"\"\"\n    try:\n        backup_files = []\n        for file in os.listdir(BACKUP_DIR):\n            if file.startswith(\"data_backup_\") and file.endswith(\".json\"):\n                backup_files.append(file)\n        backup_files.sort(reverse=True)\n        return backup_files[:5]  # إرجاع آخر 5 نسخ\n    except:\n        return []\n\ndef restore_backup(backup_filename):\n    \"\"\"استعادة نسخة احتياطية\"\"\"\n    try:\n        backup_path = os.path.join(BACKUP_DIR, backup_filename)\n        if os.path.exists(backup_path):\n            shutil.copy2(backup_path, DB_FILE)\n            return True\n    except:\n        pass\n    return False\n\ndef manual_backup():\n    \"\"\"إنشاء نسخة احتياطية يدوية\"\"\"\n    try:\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        backup_file = os.path.join(BACKUP_DIR, f\"manual_backup_{timestamp}.json\")\n        shutil.copy2(DB_FILE, backup_file)\n        return backup_file\n    except:\n        return None\n\ndef add_user(user_id):\n    data = load_data()\n    if user_id not in data[\"users\"]:\n        data[\"users\"].append(user_id)\n        save_data(data)\n\ndef get_all_users():\n    return load_data()[\"users\"]\n\ndef add_channel(channel_username):\n    data = load_data()\n    if channel_username not in data[\"channels\"]:\n        data[\"channels\"].append(channel_username)\n        save_data(data)\n\ndef remove_channel(channel_username):\n    data = load_data()\n    if channel_username in data[\"channels\"]:\n        data[\"channels\"].remove(channel_username)\n        save_data(data)\n\ndef get_all_channels():\n    return load_data()[\"channels\"]\n\n# ===== تحديد لغة الترجمة =====\ndef choose_target_lang(detected_lang: str) -> str:\n    return \"en\" if detected_lang.startswith(\"ar\") else \"ar\"\n\n# ===== التحقق من الاشتراك بالقنوات =====\nasync def get_unsubscribed_channels(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user_id = update.effective_user.id\n    channels = get_all_channels()\n    unsubscribed = []\n    for channel in channels:\n        try:\n            member = await context.bot.get_chat_member(channel, user_id)\n            if member.status not in [\"member\", \"administrator\", \"creator\"]:\n                unsubscribed.append(channel)\n        except:\n            unsubscribed.append(channel)\n    return unsubscribed\n\nasync def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:\n    unsubscribed = await get_unsubscribed_channels(update, context)\n    if unsubscribed:\n        channels_text = \"\\n\".join(unsubscribed)\n        await update.message.reply_text(\n            f\"⚠️ يجب الاشتراك في جميع القنوات التالية للحصول على الخدمة:\\n{channels_text}\"\n        )\n        return False\n    return True\n\n# ===== لوحة التحكم للمستخدم =====\nasync def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    keyboard = [\n        [InlineKeyboardButton(\"📝 ترجمة نص\", callback_data=\"translate_text\")],\n        [InlineKeyboardButton(\"ℹ️ معلومات عن البوت\", callback_data=\"about\")],\n    ]\n    if update.effective_user.id == ADMIN_ID:\n        keyboard.append([InlineKeyboardButton(\"🛠 لوحة تحكم الأدمِن\", callback_data=\"admin_panel\")])\n    reply_markup = InlineKeyboardMarkup(keyboard)\n    if update.message:\n        await update.message.reply_text(\"مرحباً! اختر خياراً:\", reply_markup=reply_markup)\n    elif update.callback_query:\n        await update.callback_query.edit_message_text(\"مرحباً! اختر خياراً:\", reply_markup=reply_markup)\n\n# ===== /start =====\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user_id = update.effective_user.id\n    if user_id != ADMIN_ID:\n        if not await check_subscription(update, context):\n            return\n        add_user(user_id)\n    await show_menu(update, context)\n\n# ===== التعامل مع الأزرار =====\nasync def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    await query.answer()\n    user_id = query.from_user.id\n    data = query.data\n\n    # التحقق من الاشتراك للمستخدم العادي\n    if user_id != ADMIN_ID:\n        unsubscribed = await get_unsubscribed_channels(update, context)\n        if unsubscribed:\n            channels_text = \"\\n\".join(unsubscribed)\n            await query.edit_message_text(\n                f\"⚠️ يجب الاشتراك في جميع القنوات التالية للحصول على الخدمة:\\n{channels_text}\"\n            )\n            return\n\n    if data == \"translate_text\":\n        await query.edit_message_text(\"✏️ أرسل لي النص الذي تريد ترجمته:\")\n        context.user_data[\"mode\"] = \"translate\"\n    elif data == \"about\":\n        await query.edit_message_text(\"🤖 هذا بوت لترجمة النصوص بين العربية والإنجليزية.\")\n    elif data == \"admin_panel\" and user_id == ADMIN_ID:\n        keyboard = [\n            [InlineKeyboardButton(\"📊 عدد المشتركين\", callback_data=\"admin_count\")],\n            [InlineKeyboardButton(\"📣 إرسال رسالة جماعية\", callback_data=\"admin_broadcast\")],\n            [InlineKeyboardButton(\"➕ إضافة قناة اشتراك\", callback_data=\"admin_add_channel\")],\n            [InlineKeyboardButton(\"➖ إزالة قناة اشتراك\", callback_data=\"admin_remove_channel\")],\n            [InlineKeyboardButton(\"📌 عرض قنوات الاشتراك\", callback_data=\"admin_show_channels\")],\n            [InlineKeyboardButton(\"💾 إنشاء نسخة احتياطية\", callback_data=\"admin_create_backup\")],\n            [InlineKeyboardButton(\"📂 استعادة نسخة احتياطية\", callback_data=\"admin_restore_backup\")],\n            [InlineKeyboardButton(\"↩️ رجوع\", callback_data=\"back_to_main\")]\n        ]\n        reply_markup = InlineKeyboardMarkup(keyboard)\n        await query.edit_message_text(\"🛠 لوحة تحكم الأدمِن:\", reply_markup=reply_markup)\n    elif data == \"admin_count\" and user_id == ADMIN_ID:\n        users = get_all_users()\n        await query.edit_message_text(f\"📊 عدد المشتركين في البوت: {len(users)}\")\n    elif data == \"admin_broadcast\" and user_id == ADMIN_ID:\n        await query.edit_message_text(\"✏️ أرسل لي الرسالة التي تريد إرسالها لجميع المشتركين:\")\n        context.user_data[\"mode\"] = \"broadcast\"\n    elif data == \"admin_add_channel\" and user_id == ADMIN_ID:\n        await query.edit_message_text(\"✏️ أرسل @اسم_القناة لإضافتها كشرط اشتراك:\")\n        context.user_data[\"mode\"] = \"add_channel\"\n    elif data == \"admin_remove_channel\" and user_id == ADMIN_ID:\n        channels = get_all_channels()\n        if not channels:\n            await query.edit_message_text(\"⚠️ لا توجد قنوات لتتم إزالتها.\")\n            return\n        keyboard = [[InlineKeyboardButton(ch, callback_data=f\"remove_{ch}\")] for ch in channels]\n        keyboard.append([InlineKeyboardButton(\"↩️ رجوع\", callback_data=\"admin_panel\")])\n        reply_markup = InlineKeyboardMarkup(keyboard)\n        await query.edit_message_text(\"اختر القناة التي تريد إزالتها:\", reply_markup=reply_markup)\n    elif data.startswith(\"remove_\") and user_id == ADMIN_ID:\n        ch = data.replace(\"remove_\", \"\")\n        remove_channel(ch)\n        await query.edit_message_text(f\"✅ تم إزالة القناة {ch}\")\n    elif data == \"admin_show_channels\" and user_id == ADMIN_ID:\n        channels = get_all_channels()\n        if channels:\n            channels_text = \"\\n\".join(channels)\n            await query.edit_message_text(f\"📌 القنوات المفروضة كشرط للاشتراك:\\n{channels_text}\")\n        else:\n            await query.edit_message_text(\"⚠️ لا توجد أي قناة مفروضة حالياً.\")\n    elif data == \"back_to_main\":\n        await show_menu(update, context)\n        context.user_data.pop(\"mode\", None)\n\n# ===== التعامل مع الرسائل =====\nasync def translate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user_id = update.effective_user.id\n    text = update.message.text.strip()\n    if not text:\n        return\n\n    # التحقق من الاشتراك للمستخدم العادي\n    if user_id != ADMIN_ID:\n        unsubscribed = await get_unsubscribed_channels(update, context)\n        if unsubscribed:\n            channels_text = \"\\n\".join(unsubscribed)\n            await update.message.reply_text(\n                f\"⚠️ يجب الاشتراك في جميع القنوات التالية للحصول على الخدمة:\\n{channels_text}\"\n            )\n            return\n\n    mode = context.user_data.get(\"mode\")\n\n    # إضافة قناة جديدة\n    if mode == \"add_channel\" and user_id == ADMIN_ID:\n        if not text.startswith(\"@\"):\n            await update.message.reply_text(\"⚠️ يجب أن يبدأ اسم القناة بـ @\")\n            return\n        add_channel(text)\n        await update.message.reply_text(f\"✅ تم إضافة القناة {text} كشرط اشتراك.\")\n        context.user_data.pop(\"mode\", None)\n        return\n\n    # البث الجماعي\n    if mode == \"broadcast\" and user_id == ADMIN_ID:\n        users = get_all_users()\n        count = 0\n        for u in users:\n            if u == ADMIN_ID:\n                continue\n            try:\n                await context.bot.send_message(chat_id=u, text=text)\n                count += 1\n            except:\n                continue\n        await update.message.reply_text(f\"✅ تم إرسال الرسالة إلى {count} مستخدم/مشترك.\")\n        context.user_data.pop(\"mode\", None)\n        return\n\n    # الترجمة العادية\n    src_lang = \"ar\" if any(\"\\u0600\" <= ch <= \"\\u06FF\" for ch in text) else \"en\"\n    target = choose_target_lang(src_lang)\n    try:\n        translated = GoogleTranslator(source=\"auto\", target=target).translate(text)\n    except:\n        await update.message.reply_text(\"⚠️ حدث خطأ أثناء الترجمة.\")\n        return\n    await update.message.reply_text(f\"🔄 الترجمة ({target}):\\n{translated}\")\n\n# ===== الرئيسي =====\ndef main():\n    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()\n\n    app.add_handler(CommandHandler(\"start\", start))\n    app.add_handler(CallbackQueryHandler(button_handler))\n    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, translate_handler))\n\n    print(\"✅ البوت شغال...\")\n    app.run_polling()\n\nif __name__ == \"__main__\":\n    main()","size_bytes":13007},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"deep-translator>=1.11.4\",\n    \"python-telegram-bot>=22.4\",\n]\n","size_bytes":208},"replit.md":{"content":"# بوت ترجمة التلجرام\n\n## نظرة عامة\nبوت تلجرام متقدم للترجمة بين اللغة العربية والإنجليزية مع لوحة تحكم إدارية شاملة.\n\n## الميزات الرئيسية\n- ترجمة فورية بين العربية والإنجليزية باستخدام Google Translator\n- نظام اشتراك إجباري في القنوات المحددة\n- لوحة تحكم متقدمة للمدير تشمل:\n  - عرض إحصائيات المستخدمين\n  - إرسال رسائل جماعية\n  - إدارة قنوات الاشتراك الإجباري\n- واجهة تفاعلية مع أزرار Inline Keyboard\n- تخزين البيانات في ملف JSON محلي\n\n## التقنيات المستخدمة\n- Python 3.11\n- python-telegram-bot (مكتبة التلجرام)\n- deep-translator (مكتبة الترجمة)\n- JSON لتخزين البيانات\n\n## المتغيرات البيئية المطلوبة\n- `TELEGRAM_TOKEN`: توكن البوت من @BotFather\n- `ADMIN_ID`: معرف المدير الرقمي\n\n## هيكل المشروع\n```\n.\n├── main.py              # الملف الرئيسي للبوت\n├── data.json           # ملف تخزين البيانات (يتم إنشاؤه تلقائياً)\n├── replit.md           # توثيق المشروع\n└── .gitignore          # ملفات مستثناة من Git\n```\n\n## كيفية الاستخدام\n1. تأكد من إعداد المتغيرات البيئية\n2. شغل البوت باستخدام `python main.py`\n3. ابحث عن البوت في التلجرام وأرسل `/start`\n\n## آخر التحديثات\n- 26/09/2025: إعداد المشروع على Replit مع جميع الميزات\n- تم اختبار البوت وهو يعمل بنجاح\n\n## تفضيلات المستخدم\n- استخدام تخزين JSON محلي بدلاً من قواعد البيانات\n- التركيز على الترجمة بين العربية والإنجليزية\n- لوحة تحكم شاملة للمدير","size_bytes":2070}},"version":1}